import 'package:get/get.dart';
import 'package:xori/models/story_model.dart';
import 'package:xori/models/story_comment_model.dart';
import 'package:xori/services/story_service.dart';
import 'package:xori/services/auth_service.dart';
import 'package:xori/services/firestore_service.dart';

class StoryController extends GetxController {
  final StoryService _storyService = StoryService();
  final AuthService _authService = AuthService();
  final FirestoreService _firestoreService = Get.find<FirestoreService>();
  final RxList<StoryModel> stories = <StoryModel>[].obs;
  final RxInt currentIndex = 0.obs;
  final RxBool isLoading = true.obs;
  
  // Like and comment related observables
  final RxMap<String, bool> storyLikeStates = <String, bool>{}.obs;
  final RxMap<String, int> storyLikeCounts = <String, int>{}.obs;
  final RxMap<String, int> storyCommentCounts = <String, int>{}.obs;

  @override
  void onInit() {
    super.onInit();
    final args = Get.arguments;
    final List<StoryModel>? storyList = args?['stories'] as List<StoryModel>?;
    final int? initialIndex = args?['initialIndex'] as int?;
    if (storyList != null && storyList.isNotEmpty) {
      stories.assignAll(storyList);
      currentIndex.value = initialIndex ?? 0;
      _initializeLikeAndCommentData();
      isLoading.value = false;
    } else {
      isLoading.value = false;
    }
  }

  void _initializeLikeAndCommentData() {
    final currentUserId = _authService.currentUser?.uid;
    if (currentUserId == null) return;

    for (final story in stories) {
      // Initialize like states
      _storyService.isStoryLikedByUser(story.storyId, currentUserId).listen((isLiked) {
        storyLikeStates[story.storyId] = isLiked;
      });

      // Initialize like counts
      _storyService.getLikeCount(story.storyId).listen((count) {
        storyLikeCounts[story.storyId] = count;
      });

      // Initialize comment counts
      _storyService.getCommentCount(story.storyId).listen((count) {
        storyCommentCounts[story.storyId] = count;
      });
    }
  }

  Future<void> fetchStory(String storyId) async {
    isLoading.value = true;
    try {
      final doc = await _storyService.fetchStoryById(storyId);
      if (doc != null) {
        stories.assignAll([doc]);
        currentIndex.value = 0;
      }
    } finally {
      isLoading.value = false;
    }
  }

  void nextStory() {
    if (currentIndex.value < stories.length - 1) {
      currentIndex.value++;
    } else {
      Get.back();
    }
  }

  void previousStory() {
    if (currentIndex.value > 0) {
      currentIndex.value--;
    } else {
      Get.back();
    }
  }

  // Like functionality
  Future<void> toggleLike(String storyId) async {
    final currentUserId = _authService.currentUser?.uid;
    if (currentUserId == null) return;

    try {
      final isCurrentlyLiked = storyLikeStates[storyId] ?? false;
      if (isCurrentlyLiked) {
        await _storyService.unlikeStory(storyId, currentUserId);
      } else {
        await _storyService.likeStory(storyId, currentUserId);
      }
    } catch (e) {
      Get.snackbar('Error', 'Failed to update like: ${e.toString()}');
    }
  }

  // Comment functionality
  Future<void> addComment(String storyId, String text) async {
    final currentUserId = _authService.currentUser?.uid;
    if (currentUserId == null || text.trim().isEmpty) return;

    try {
      // Get current user info
      final userDoc = await _firestoreService.getUser(currentUserId);
      if (userDoc == null) return;

      final comment = StoryComment(
        id: '', // Will be auto-generated by Firestore
        userId: currentUserId,
        username: userDoc.username,
        userPhotoUrl: userDoc.profileImageUrl ?? '',
        text: text.trim(),
        createdAt: DateTime.now(),
      );

      await _storyService.addComment(storyId, comment);
    } catch (e) {
      Get.snackbar('Error', 'Failed to add comment: ${e.toString()}');
    }
  }

  // Get current story
  StoryModel? get currentStory {
    if (stories.isEmpty || currentIndex.value >= stories.length) return null;
    return stories[currentIndex.value];
  }

  // Get like state for current story
  bool get isCurrentStoryLiked {
    final story = currentStory;
    if (story == null) return false;
    return storyLikeStates[story.storyId] ?? false;
  }

  // Get like count for current story
  int get currentStoryLikeCount {
    final story = currentStory;
    if (story == null) return 0;
    return storyLikeCounts[story.storyId] ?? 0;
  }

  // Get comment count for current story
  int get currentStoryCommentCount {
    final story = currentStory;
    if (story == null) return 0;
    return storyCommentCounts[story.storyId] ?? 0;
  }
}
